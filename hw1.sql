drop table if exists dbms;
drop table if exists students;
drop table if exists courses;
drop table if exists groups;

create table if not exists courses
(
    id int generated by default as identity primary key,
    name varchar(100) not null,
    is_exam bool not null,
    min_grade int not null,
    max_grade int not null
);

create table if not exists groups
(
	id int generated by default as identity primary key,
	full_name varchar(100) not null,
	short_name varchar(10),
	students_ids int[]
);

create table if not exists students
(
	id int generated by default as identity primary key,
	first_name varchar(100) not null,
	last_name varchar(100) not null,
	group_id int references groups(id) on delete set null,
	courses_ids int[]
);

create table if not exists dbms 
(
    student_id int references students(id) on delete cascade,
    grade int not null,
    grade_str varchar(2) generated always as (
        case 
            when grade >= 90 then 'A'
            when grade >= 80 then 'B'
            when grade >= 70 then 'C'
            when grade >= 60 then 'D'
            when grade >= 50 then 'E'
            else 'F'
        end
    ) stored,
    primary key (student_id)
);

create or replace function check_grade()
returns trigger as $$
begin
    if new.grade < (select min_grade from courses where name = 'Технологии систем управления базами данных') or
       new.grade > (select max_grade from courses where name = 'Технологии систем управления базами данных') then
        raise notice 'Grade % is out of range', 
            new.grade;
		return null;
    end if;
    return new;
end;
$$ language plpgsql;

create trigger grade_check
before insert or update on dbms
for each row
execute function check_grade();

insert into courses (name, is_exam, min_grade, max_grade) values
('Теория байесовских сетей', true, 0, 100),
('Основы машинного обучения', true, 0, 100),
('Технологии систем управления базами данных', true, 0, 100);

insert into groups (full_name, short_name, students_ids) values
('24.М81-мм', '81', '{1, 2}'),
('24.М82-мм', '82', '{3, 4, 5}');

insert into students (first_name, last_name, group_id, courses_ids) values
('Всеволод', 'Битепаж', 1, '{1, 2, 3}'),
('Давид', 'Асатуров', 1, '{1, 2, 3}'),
('Максим', 'Трапер', 2, '{1, 2}'),
('Георгий', 'Пономарёв', 2, '{1, 3}'),
('Артём', 'Пышный', 2, '{1, 3}');


insert into dbms (student_id, grade) values
(1, 95),
(2, 85),
(4, 88),
(5, -5);

select s.first_name, s.last_name, d.grade, d.grade_str
from students s
join dbms d on s.id = d.student_id
join courses c on c.id = 1
where d.grade >= 86;


select max(d.grade) as highest_grade, min(d.grade) as lowest_grade
from dbms d;

select g.full_name, count(s.id) as num_students
from groups g
join students s on g.id = s.group_id
group by g.id;

select g.short_name as group_name, 
       avg(d.grade) as avg_grade
from groups g
join students s on g.id = s.group_id
join dbms d on s.id = d.student_id
join courses c on c.id = any(s.courses_ids)
where c.name = 'Технологии систем управления базами данных'
group by g.id, g.short_name order by g.short_name asc;