DROP TABLE IF EXISTS student_courses;
DROP TABLE IF EXISTS group_courses;
DROP TABLE IF EXISTS dbms;
DROP TABLE IF EXISTS students;
DROP TABLE IF EXISTS courses;
DROP TABLE IF EXISTS groups;

--Первое задание

CREATE TABLE IF NOT EXISTS courses
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(250) NOT NULL,
    is_exam bool NOT NULL,
    min_grade int NOT NULL,
    max_grade int NOT NULL
);

CREATE TABLE IF NOT EXISTS groups
(
	id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	full_name varchar(100) NOT NULL,
	short_name varchar(10),
	students_ids int[]
);

CREATE TABLE IF NOT EXISTS students
(
	id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	first_name varchar(100) NOT NULL,
	last_name varchar(100) NOT NULL,
	group_id int REFERENCES groups(id) ON DELETE SET NULL,
	courses_ids int[]
);

CREATE TABLE IF NOT EXISTS dbms 
(
    student_id int REFERENCES students(id) ON DELETE CASCADE,
    grade int NOT NULL,
    grade_str varchar(2) GENERATED ALWAYS AS (
        CASE 
            WHEN grade >= 90 THEN 'A'
            WHEN grade >= 80 THEN 'B'
            WHEN grade >= 70 THEN 'C'
            WHEN grade >= 60 THEN 'D'
            WHEN grade >= 50 THEN 'E'
            ELSE 'F'
        END
    ) STORED,
    PRIMARY KEY (student_id)
);

CREATE OR REPLACE FUNCTION check_grade()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.grade < (SELECT min_grade FROM courses WHERE name = 'Технологии систем управления базами данных') OR
       NEW.grade > (SELECT max_grade FROM courses WHERE name = 'Технологии систем управления базами данных') THEN
        RAISE NOTICE 'Grade % is out of range', 
            NEW.grade;
		RETURN null;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER grade_check
BEFORE INSERT OR UPDATE ON dbms
FOR EACH ROW
EXECUTE FUNCTION check_grade();


--Второе задание. Пункт 1

CREATE TABLE student_courses
(
	id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	student_id int REFERENCES students(id) ON DELETE CASCADE,
	course_id int REFERENCES courses(id) ON DELETE CASCADE,
	grade float DEFAULT 0,
    grade_str varchar(2),
	UNIQUE (student_id, course_id)
);

CREATE OR REPLACE FUNCTION set_grade_str()
RETURNS TRIGGER AS $$
BEGIN
    NEW.grade_str := CASE 
        WHEN NEW.grade >= 0.9 * (SELECT max_grade FROM courses WHERE courses.id = NEW.course_id) THEN 'A'
        WHEN NEW.grade >= 0.8 * (SELECT max_grade FROM courses WHERE courses.id = NEW.course_id) THEN 'B'
        WHEN NEW.grade >= 0.7 * (SELECT max_grade FROM courses WHERE courses.id = NEW.course_id) THEN 'C'
        WHEN NEW.grade >= 0.6 * (SELECT max_grade FROM courses WHERE courses.id = NEW.course_id) THEN 'D'
        WHEN NEW.grade >= 0.5 * (SELECT max_grade FROM courses WHERE courses.id = NEW.course_id) THEN 'E'
        ELSE 'F'
    END;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER before_insert_update_student_courses
BEFORE INSERT OR UPDATE ON student_courses
FOR EACH ROW
EXECUTE FUNCTION set_grade_str();

CREATE TABLE group_courses
( 	
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	group_id int REFERENCES groups(id) ON DELETE CASCADE,
	course_id int REFERENCES courses(id) ON DELETE CASCADE,
	UNIQUE (group_id, course_id)
);

CREATE OR REPLACE FUNCTION after_group_course_insert_function()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO student_courses (student_id, course_id)
    SELECT s.id, NEW.course_id
    FROM students s
    WHERE s.group_id = NEW.group_id;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER after_group_course_insert
AFTER INSERT ON group_courses
FOR EACH ROW
EXECUTE FUNCTION after_group_course_insert_function();


CREATE OR REPLACE FUNCTION after_student_insert_function()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO student_courses (student_id, course_id)
    SELECT NEW.id, gc.course_id
    FROM group_courses gc
    WHERE gc.group_id = NEW.group_id;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER after_student_insert
AFTER INSERT ON students
FOR EACH ROW
EXECUTE FUNCTION after_student_insert_function();


ALTER TABLE groups 
DROP COLUMN students_ids;

ALTER TABLE students 
DROP COLUMN courses_ids;


DROP TRIGGER grade_check ON dbms;
DROP TABLE dbms;

CREATE OR REPLACE FUNCTION check_grade()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.grade < (SELECT min_grade FROM courses WHERE NEW.course_id = courses.id) OR
       NEW.grade > (SELECT max_grade FROM courses WHERE NEW.course_id = courses.id) THEN
        RAISE NOTICE 'Grade % is out of range', 
            NEW.grade;
		RETURN null;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER grade_check
BEFORE INSERT OR UPDATE ON student_courses
FOR EACH ROW
EXECUTE FUNCTION check_grade();

INSERT INTO courses (name, is_exam, min_grade, max_grade) VALUES
('Теория байесовских сетей', TRUE, 0, 100),
('Основы машинного обучения', TRUE, 0, 40),
('Технологии систем управления базами данных', TRUE, 0, 100),
('Психология коммуникации в проектной команде', FALSE, 0, 100),
('Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей', TRUE, 0, 100);

INSERT INTO groups (full_name, short_name) VALUES
('24.М81-мм', '81'),
('24.М82-мм', '82');

INSERT INTO students (first_name, last_name, group_id) VALUES
('Всеволод', 'Битепаж', 1),
('Давид', 'Асатуров', 1),
('Михаил', 'Минаев', 1),
('Элина', 'Владимирова', 1),
('Георгий', 'Пономарёв', 2),
('Максим', 'Трапер', 2),
('Артём', 'Пышный', 2),
('Александра', 'Решетникова', 2);

INSERT INTO group_courses (group_id, course_id) VALUES
(1, 1),
(1, 2),
(1, 3),
(1, 4),
(1, 5),
(2, 1),
(2, 2),
(2, 3),
(2, 4),
(2, 5);

UPDATE student_courses SET grade = 34 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Всеволод' AND last_name = 'Битепаж') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Теория байесовских сетей');
UPDATE student_courses SET grade = 37 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Давид' AND last_name = 'Асатуров') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Теория байесовских сетей');
UPDATE student_courses SET grade = 32 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Михаил' AND last_name = 'Минаев') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Теория байесовских сетей');
UPDATE student_courses SET grade = 32.5 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Элина' AND last_name = 'Владимирова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Теория байесовских сетей');
UPDATE student_courses SET grade = 32 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Георгий' AND last_name = 'Пономарёв') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Теория байесовских сетей');
UPDATE student_courses SET grade = 38 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Максим' AND last_name = 'Трапер') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Теория байесовских сетей');
UPDATE student_courses SET grade = 32 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Артём' AND last_name = 'Пышный') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Теория байесовских сетей');
UPDATE student_courses SET grade = 32 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Александра' AND last_name = 'Решетникова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Теория байесовских сетей');
			
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Всеволод' AND last_name = 'Битепаж') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Основы машинного обучения');
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Давид' AND last_name = 'Асатуров') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Основы машинного обучения');
UPDATE student_courses SET grade = 17 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Георгий' AND last_name = 'Пономарёв') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Основы машинного обучения');
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Максим' AND last_name = 'Трапер') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Основы машинного обучения');
UPDATE student_courses SET grade = 10 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Артём' AND last_name = 'Пышный') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Основы машинного обучения');
UPDATE student_courses SET grade = 15 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Александра' AND last_name = 'Решетникова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Основы машинного обучения');
			
UPDATE student_courses SET grade = 16 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Всеволод' AND last_name = 'Битепаж') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Технологии систем управления базами данных');
UPDATE student_courses SET grade = 16 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Давид' AND last_name = 'Асатуров') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Технологии систем управления базами данных');
UPDATE student_courses SET grade = 16 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Михаил' AND last_name = 'Минаев') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Технологии систем управления базами данных');
UPDATE student_courses SET grade = 16 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Элина' AND last_name = 'Владимирова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Технологии систем управления базами данных');
UPDATE student_courses SET grade = 16 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Георгий' AND last_name = 'Пономарёв') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Технологии систем управления базами данных');
UPDATE student_courses SET grade = 12 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Максим' AND last_name = 'Трапер') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Технологии систем управления базами данных');
UPDATE student_courses SET grade = 14 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Артём' AND last_name = 'Пышный') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Технологии систем управления базами данных');
UPDATE student_courses SET grade = 14 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Александра' AND last_name = 'Решетникова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Технологии систем управления базами данных');

UPDATE student_courses SET grade = 6 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Всеволод' AND last_name = 'Битепаж') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Психология коммуникации в проектной команде');
UPDATE student_courses SET grade = 8 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Давид' AND last_name = 'Асатуров') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Психология коммуникации в проектной команде');
UPDATE student_courses SET grade = 7 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Михаил' AND last_name = 'Минаев') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Психология коммуникации в проектной команде');
UPDATE student_courses SET grade = 7 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Элина' AND last_name = 'Владимирова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Психология коммуникации в проектной команде');
UPDATE student_courses SET grade = 7 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Георгий' AND last_name = 'Пономарёв') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Психология коммуникации в проектной команде');
UPDATE student_courses SET grade = 5 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Максим' AND last_name = 'Трапер') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Психология коммуникации в проектной команде');
UPDATE student_courses SET grade = 6 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Артём' AND last_name = 'Пышный') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Психология коммуникации в проектной команде');
UPDATE student_courses SET grade = 6 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Александра' AND last_name = 'Решетникова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Психология коммуникации в проектной команде');
			
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Всеволод' AND last_name = 'Битепаж') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей');
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Давид' AND last_name = 'Асатуров') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей');
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Михаил' AND last_name = 'Минаев') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей');
UPDATE student_courses SET grade = 16 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Элина' AND last_name = 'Владимирова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей');
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Георгий' AND last_name = 'Пономарёв') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей');
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Максим' AND last_name = 'Трапер') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей');
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Артём' AND last_name = 'Пышный') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей');
UPDATE student_courses SET grade = 20 WHERE student_id = (SELECT id FROM students WHERE 
					first_name = 'Александра' AND last_name = 'Решетникова') 
				AND course_id = (SELECT id FROM courses WHERE name = 'Методы и технологии искусственного интеллекта и науки о данных в анализе и моделировании социальных сетей');
			
		
--Второе задание. Пункт 2
		
ALTER TABLE courses 
ADD CONSTRAINT name_unique UNIQUE (name);

CREATE INDEX ON students (group_id);
--Индекс ускоряет поиск студентов по группам, соединение с таблицей groups, подзапросы, обращающиеся к group_id.

--Второе задание. Пункт 3

SELECT s.first_name,
       s.last_name,
       g.full_name AS group_name,
       STRING_AGG(c.name, ', ' ORDER BY c.name) AS course_names
FROM students s
JOIN groups g ON s.group_id = g.id
JOIN student_courses sc ON s.id = sc.student_id
JOIN courses c ON sc.course_id = c.id
GROUP BY s.id, s.first_name, s.last_name, g.full_name;

SELECT s.first_name,
       s.last_name,
       g.full_name AS group_name,
       AVG(sc.grade) AS student_avg_grade,
       group_avg.avg_grade AS group_avg_grade
FROM students s
JOIN student_courses sc ON s.id = sc.student_id
JOIN groups g ON s.group_id = g.id
JOIN (
    SELECT s1.group_id, AVG(sc1.grade) AS avg_grade
    FROM students s1
    JOIN student_courses sc1 ON s1.id = sc1.student_id
    GROUP BY s1.group_id
) AS group_avg ON s.group_id = group_avg.group_id
GROUP BY s.id, s.first_name, s.last_name, g.full_name, group_avg.avg_grade
HAVING AVG(sc.grade) > ALL (
    SELECT AVG(sc2.grade)
    FROM students s2
    JOIN student_courses sc2 ON s2.id = sc2.student_id
    WHERE s2.group_id = s.group_id AND s2.id != s.id
    GROUP BY s2.id
);

--Второе задание. Пункт 4

SELECT c.id AS course_id,
       c.name AS course_name,
       COUNT(sc.student_id) AS student_count,
       AVG(sc.grade) AS avg_grade
FROM courses c
LEFT JOIN student_courses sc ON c.id = sc.course_id
GROUP BY c.id, c.name;